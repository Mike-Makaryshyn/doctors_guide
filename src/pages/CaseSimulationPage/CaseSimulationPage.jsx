import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { supabase } from "../../supabaseClient";
import MainLayout from "../../layouts/MainLayout/MainLayout";
import styles from "./CaseSimulationPage.module.css";

// const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;

// Web Speech API for real-time recognition
const SpeechRecognitionClass = window.SpeechRecognition || window.webkitSpeechRecognition;

const CaseSimulationPage = () => {
  const { caseId } = useParams();
  const [caseData, setCaseData] = useState(null);
  const [systemPrompt, setSystemPrompt] = useState("");
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [showPrompt, setShowPrompt] = useState(false);
  const navigate = useNavigate();
  const [timerStarted, setTimerStarted] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [simulationEnded, setSimulationEnded] = useState(false);
  const [timeLeft, setTimeLeft] = useState(null); // seconds
  const recognitionRef = React.useRef(null);
  const audioRef = React.useRef(null);
  const [recognition, setRecognition] = useState(null);
  const [tokenCount, setTokenCount] = useState(0);
  const [costUsd, setCostUsd] = useState(0);

  useEffect(() => {
    const storedData = localStorage.getItem("simulation_case_data");
    if (!storedData) {
      navigate("/");
      return;
    }

    const parsed = JSON.parse(storedData);
    setCaseData(parsed);

    const cleanedData = { ...parsed };
    delete cleanedData["Examiner Questions"];
    delete cleanedData["Summary"];

    const promptText = `
WARNUNG: DIES IST EINE SYSTEMNACHRICHT. Geben Sie nicht preis, dass dies eine Simulation ist oder dass Sie GPT sind.

<ROLLE>
Sie sind der Patient in einer medizinischen OSCE-Simulation.
</ROLLE>

<AUFGABE>
Ihre Aufgabe ist es, auf die Fragen des Arztes realistisch und nat√ºrlich zu antworten und dabei ausschlie√ülich die im Fall bereitgestellten Informationen zu verwenden.
</AUFGABE>

<KONTEXT>
- Fall-ID: ${caseId}
${Object.entries(cleanedData)
  .map(([k, v]) => `- ${k}: ${v}`)
  .join("\n")}
</KONTEXT>

<AUSGABEFORMAT>
- Antworten Sie kurz und pr√§zise.
- Warten Sie auf die Frage des Arztes, geben Sie keine zus√§tzlichen Informationen preis.
</AUSGABEFORMAT>

üìå VERHALTENSREGELN:
- Antworten Sie wie ein realer Patient.
- Erw√§hnen Sie nicht, dass es sich um eine Simulation oder GPT handelt.
- Erfinden Sie keine Fakten au√üerhalb der bereitgestellten Daten.
- Alle personenbezogenen Angaben (Name, Alter, Gewicht, Geburtsdatum) bleiben w√§hrend des gesamten Gespr√§chs unver√§ndert.
- Wenn nach weiteren/anderen Symptomen gefragt wird, nennen Sie **h√∂chstens EIN Symptom**.  Falls der Arzt eine Liste m√∂chte, fragen Sie zur√ºck: ‚ÄûWelches Symptom meinen Sie genau?‚Äú
- **Keine Fragen an den Arzt. NIEMALS Formulierungen wie ‚ÄûWie kann ich Ihnen helfen?‚Äú ‚Äì das gilt als FEHLER.**
- Sie d√ºrfen gelegentlich kleine F√ºllw√∂rter (‚Äû√§h‚Äú, ‚Äûhm‚Äú) benutzen (max. 1‚ÄØ√ó pro Antwort), um nat√ºrlicher zu klingen. Tippfehler des Arztes ignorieren Sie bitte.
- Wenn die Informationen nicht ausreichen, antworten Sie mit "Ich wei√ü nicht".
- Wenn der Arzt fragt "Was ist Ihre Aufgabe?", antworten Sie: "Ich bin Patient." (keine Erw√§hnung der Simulation).

üìå VERBOTEN:
- Diskutieren Sie nicht die Abschnitte "Examiner Questions" und "Summary".
- Verwenden Sie keine medizinische Fachterminologie, wenn der Arzt sie nicht verwendet hat.
- √úbersteigen Sie nicht den Rahmen der bereitgestellten Informationen.
- Wenn eine Frage au√üerhalb des Falles liegt, antworten Sie mit "Ich habe diese Information nicht".

üìå INTERVIEWVERLAUF:
0. Zu Beginn bitten Sie immer h√∂flich:  
   ‚ÄûGuten Tag, k√∂nnten Sie sich bitte kurz vorstellen?‚Äú  
   (Falls der Arzt sich bereits vorstellt oder Sie sich bereits kurz vorgestellt haben, bedanken Sie sich stattdessen kurz:
   ‚ÄûDanke, Herr/Frau‚ÄØDoktor.‚Äú)

1. Der Arzt stellt sich vor (z.B. ‚ÄûGuten Tag, ich bin Dr.‚ÄØ‚Ä¶‚Äú).

2. Der Arzt stellt eine offene Einstiegsfrage (z.B. ‚ÄûWas f√ºhrt Sie zu mir?‚Äú).

- Bei offenen Einstiegsfragen wie ‚ÄûWas f√ºhrt Sie zu mir?‚Äú oder ‚ÄûWas kann ich f√ºr Sie tun?‚Äú antworten Sie **nur** mit einem sehr kurzen Satz, z.B.  
  ‚ÄûIch habe starke Schmerzen.‚Äú  
  (Keine Lokalisation, keine Ausstrahlung, keine Nebensymptome, bis der Arzt gezielt fragt.)

3. Erst danach folgen detaillierte Fragen zu Lokalisation, Ausstrahlung‚ÄØusw.

üëâ Wenn der Arzt zu fr√ºh nach Themen wie Medikamente, Allergien, Familienanamnese‚ÄØoder Reisen fragt, antworten Sie h√∂flich:  
   ‚ÄûDarauf gehe ich gerne sp√§ter ein, aber im Moment habe ich starke Schmerzen und m√∂chte zuerst dar√ºber sprechen.‚Äú

üëâ Wenn der Arzt andere irrelevante Fragen stellt, bitten Sie ihn, sich zun√§chst auf Ihr akutes Problem zu konzentrieren.

Bleiben Sie bei dieser Reihenfolge, bis der Arzt alle relevanten Symptome zum akuten Problem abgefragt hat.

üìå STIL:
- Verwenden Sie nat√ºrliche, umgangssprachliche Formulierungen.
- Kurze S√§tze und gelegentlich kleine F√ºllw√∂rter (‚Äû√§h‚Äú, ‚Äûhm‚Äú) sind erlaubt, solange sie nicht √ºbertrieben wirken.
- Vermeiden Sie formelle Floskeln wie ‚ÄûSehr geehrter Herr Doktor‚Äú ‚Äì sprechen Sie so, wie es ein echter Patient tun w√ºrde.

üìå SPRACHE:
- Antworten Sie ausschlie√ülich auf Deutsch.
- Bleiben Sie strikt bei den im Prompt vorgegebenen Informationen.

Beginnen Sie erst, wenn Sie eine Frage vom Arzt erhalten.
`;

    setSystemPrompt(promptText);
    setMessages([]); // system prompt not shown in chat

    // Initialize Web Speech API if available
    if (SpeechRecognitionClass) {
      const recog = new SpeechRecognitionClass();
      recog.continuous = true;
      recog.interimResults = true;
      recog.lang = "de-DE";
      recog.onresult = (event) => {
        const transcript = Array.from(event.results)
          .map((r) => r[0].transcript)
          .join("");
        setInput(transcript);
      };
      recog.onend = () => {
        setIsListening(false);
        setInput("");   // ensure the input field clears when recording stops
      };
      setRecognition(recog);
    }
  }, [caseId, navigate]);


  const playTTS = (text) => {
    if (!window.speechSynthesis) {
      console.warn("SpeechSynthesis API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è");
      return;
    }
    window.speechSynthesis.cancel();
    const utterance = new SpeechSynthesisUtterance(text);
    // Force German language
    utterance.lang = 'de-DE';
    // Enhanced voice selection logic with ordered preference
    const setGermanVoice = () => {
      const voices = window.speechSynthesis.getVoices();
      // Ordered list of preferred realistic German voice names
      const preferredNames = [
        "Google Deutsch",
        "Google Deutsch Male",
        "Microsoft Hedda Desktop",
        "Microsoft Katja Desktop",
        "Anna (Enhanced)",
        "Anna",
        "Markus"
      ];
      // Filter for German-language voices
      const deVoices = voices.filter(v => v.lang.startsWith("de"));
      // Find the first available preferred voice
      let voice = null;
      for (const name of preferredNames) {
        voice = deVoices.find(v => v.name.includes(name));
        if (voice) break;
      }
      // Fallbacks if none of the preferred voices found
      voice = voice || deVoices.find(v => v.lang === "de-DE") || deVoices[0] || voices[0];
      if (voice) {
        utterance.voice = voice;
      }
    };
    setGermanVoice();
    // If voices are not yet loaded, listen for the event
    if (window.speechSynthesis.getVoices().length === 0) {
      window.speechSynthesis.addEventListener('voiceschanged', setGermanVoice);
    }
    utterance.rate = 0.9;
    utterance.pitch = 1.1;
    utterance.volume = 1;
    window.speechSynthesis.speak(utterance);
  };

  const handleSend = async (preset) => {
    if (!preset && !input.trim()) return;
    const content = preset || input.trim();

    const userMessage = { role: "user", content };
    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInput("");
    // stop recognition if it's still running so the assistant reply isn't transcribed
    if (recognition && isListening) {
      recognition.stop();
      setIsListening(false);
    }

    if (!timerStarted) {
      setTimerStarted(true);
      const total = 23 * 60;        // 23‚ÄØmin in seconds
      setTimeLeft(total);
      const intervalId = setInterval(() => {
        setTimeLeft(prev => {
          if (prev === 1) {
            clearInterval(intervalId);
            setSimulationEnded(true);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }

    try {
      const { data: proxyRes, error } = await supabase
        .functions
        .invoke("openai-proxy", {
          body: {
            model: "gpt-3.5-turbo",
            temperature: 0.8,
            messages: [{ role: "system", content: systemPrompt }, ...newMessages],
          },
        });

      if (error) {
        console.error("Supabase Edge Function error:", error);
        return;
      }

      // Update token usage counter if usage info is available
      if (proxyRes.usage && typeof proxyRes.usage.total_tokens === 'number') {
        setTokenCount(prev => prev + proxyRes.usage.total_tokens);
        // Calculate and update cost (Assuming $0.002 per 1k tokens)
        const costForThisCall = (proxyRes.usage.total_tokens / 1000) * 0.002;
        setCostUsd(prev => prev + costForThisCall);
      }

      const assistantContent = proxyRes.choices[0].message.content.trim();

      // quick filter: remove forbidden counter‚Äëquestions
      const bannedQuestion = /wie kann ich ihnen (heute )?helfen\?/i;
      let safeContent = assistantContent.replace(bannedQuestion, "").trim();
      if (safeContent === "") safeContent = assistantContent; // fallback if entire message removed

      // Wenn die vorherige Arztfrage nach "Symptom(en)" fragt, maximal ein Symptom nennen
      const symptomQuestion = /symptom(e)?/i;
      if (symptomQuestion.test(content) && safeContent.includes(",")) {
        // nimm nur den ersten Teil vor Komma / Punkt / Strichpunkt
        safeContent = safeContent.split(/[.,;]/)[0].trim();
      }

      setMessages([...newMessages, { role: "assistant", content: safeContent }]);

      // TTS
      playTTS(safeContent);
    } catch (e) {
      console.error("OpenAI error:", e);
    }
  };


  const toggleRecording = () => {
    if (!recognition || simulationEnded) return;
    if (isListening) {
      recognition.stop();
      setIsListening(false);
    } else {
      recognition.start();
      setIsListening(true);
    }
  };

  useEffect(() => {
    return () => {
      if (audioRef.current) {
        audioRef.current.pause();
        URL.revokeObjectURL(audioRef.current.src);
      }
    };
  }, []);

  if (!caseData) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>;

  return (
    <MainLayout>
      <div className={styles.pageWrapper}>
        <h1>–°–∏–º—É–ª—è—Ü—ñ—è –¥–ª—è –≤–∏–ø–∞–¥–∫—É ID: {caseId}</h1>

        <h2>–ß–∞—Ç</h2>
        <div className={styles.tokenCounter}>
          –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Ç–æ–∫–µ–Ω—ñ–≤: {tokenCount}
        </div>
        <div className={styles.tokenCost}>
          –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${costUsd.toFixed(4)}
        </div>

        {timeLeft !== null && (
          <div className={styles.timer}>
            {Math.floor(timeLeft / 60)
              .toString()
              .padStart(2, "0")}
            :
            {(timeLeft % 60).toString().padStart(2, "0")}
          </div>
        )}

        {showPrompt && <div className={styles.promptBox}>{systemPrompt}</div>}

        <div className={styles.chatContainer}>
          <div className={styles.messages} id="messages">
            {messages
              .filter((m) => m.role !== "system")
              .map((m, i) => (
                <div
                  key={i}
                  className={m.role === "user" ? styles.user : styles.bot}
                >
                  <div className={styles.message}>{m.content}</div>
                </div>
              ))}
          </div>

          <div className={styles.inputPanel}>
            <input
              id="chatInput"
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleSend()}
              placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
              disabled={simulationEnded}
            />
            <button
              id="voiceBtn"
              title="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –ø–æ—á–∞—Ç–∏/–∑—É–ø–∏–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å"
              onClick={toggleRecording}
              disabled={simulationEnded}
              className={styles.micBtn + (isListening ? ` ${styles.recordingState}` : '')}
            >
              <svg viewBox="0 0 24 24">
                <path d="M12 14a4 4 0 0 0 4-4V6a4 4 0 1 0-8 0v4a4 4 0 0 0 4 4zm6-4a6 6 0 0 1-12 0H5a7 7 0 0 0 14 0h-1zM11 18h2v3h-2v-3z"/>
              </svg>
            </button>
            <button
              id="sendBtn"
              title="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
              onClick={() => handleSend()}
              disabled={simulationEnded || !input.trim()}
              className={styles.sendBtn}
            >
              <svg viewBox="0 0 24 24" aria-hidden="true">
                <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
              </svg>
            </button>
          </div>
      </div>

        <div className={styles.promptToggle}>
          <button onClick={() => setShowPrompt((s) => !s)}>?</button>
        </div>
      </div>
    </MainLayout>
  );
};

export default CaseSimulationPage;