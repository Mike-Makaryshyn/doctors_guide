import React, { useMemo, useState, useEffect } from "react";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import PropTypes from "prop-types";
import { FaDownload, FaEye, FaTimes } from "react-icons/fa";
import styles from "./PDFTable.module.scss";

// Firebase
import { auth, db } from "../../firebase";
import { onAuthStateChanged } from "firebase/auth";
import { doc, onSnapshot } from "firebase/firestore";

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ notNeededText
import { notNeededText } from "../../constants/translation/documents";

// –ü—Ä–∞–ø–æ—Ä—Ü—ñ –¥–ª—è –º–æ–≤ (–º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ ‚Äúüí©‚Äù –Ω–∞ —â–æ—Å—å —ñ–Ω—à–µ –¥–ª—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó)
const languageFlags = {
  de: "üá©üá™",
  en: "üá¨üáß",
  uk: "üá∫üá¶",
  ru: "üí©",
  tr: "üáπüá∑",
  ar: "üá∏üá¶",
  fr: "üá´üá∑",
  es: "üá™üá∏",
  pl: "üáµüá±",
};

// ------------------ –•–µ–ª–ø–µ—Ä –¥–ª—è —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ ------------------
function makeRowObject(doc, checkboxes, language) {
  const docId = String(doc.id);
  const docState = checkboxes[docId] || {};

  // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ (title)
  const titleFromCategory = doc.category?.[language] || doc.category?.de || "";
  const titleFromName = doc.name?.[language] || doc.name?.de || "";
  const title = titleFromCategory || titleFromName || "";

  // 2. "Not needed" –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
  const notNeededValue =
    notNeededText[language] || notNeededText["de"] || "Not needed";

  // 3. –ß–∏ —Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç –∑ id=17 (ROV-17)?
  const isRov17 = docId === "17";

  function getFieldValue(fieldName) {
    // –Ø–∫—â–æ ROV-17 —ñ –ø–æ–ª–µ –Ω–µ is_exist / sent => "Not needed"
    if (isRov17 && !["is_exist", "sent"].includes(fieldName)) {
      return notNeededValue;
    }
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–∞–º –Ω–µ –º–∞—î –ø–æ–ª—è "notNeeded"
    let docFieldVal = doc[fieldName];
    if (typeof docFieldVal === "object" && docFieldVal !== null) {
      docFieldVal = docFieldVal[language] || docFieldVal["de"] || "";
    }
    const docNotNeeded = notNeededText[language] || notNeededText["de"];
    if (docFieldVal && docFieldVal === docNotNeeded) {
      return notNeededValue;
    }
    // –Ü–Ω–∞–∫—à–µ –¥–∏–≤–∏–º–æ—Å—å, —á–∏ –≤—ñ–¥–º—ñ—á–µ–Ω–æ —á–µ–∫–±–æ–∫—Å
    return docState[fieldName] ? "X" : "";
  }

  const available = getFieldValue("is_exist");
  const apostille = getFieldValue("apostile");
  const notary = getFieldValue("notary");
  const translation = getFieldValue("translation");
  const ready_copies = getFieldValue("ready_copies");
  const sent = getFieldValue("sent");

  return {
    title,
    available,
    apostile: apostille,
    notary,
    translation,
    ready_copies,
    sent,
  };
}

const PDFTable = ({
  onClose,
  // –ì–ª–æ–±–∞–ª—å–Ω–∞ –º–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  language: globalLanguage,
  category, // "EU" –∞–±–æ "Non-EU"
  checkboxes,
  documents,
}) => {
  // ------------------ 1) –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è PDF-–º–æ–≤–∏ ------------------
  const [pdfLanguage, setPdfLanguage] = useState(globalLanguage);

  // ------------------ 2) –°—Ç–∞–Ω–∏ –¥–ª—è firstName, lastName (–∑–∞–≤–∞–Ω—Ç–∞–¥–µ–Ω–Ω—è –∑ Firebase) ------------------
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");

  // ------------------ 3) –°—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—ó –¥–∞—Ç–∏ (–±–µ–∑ –≥–æ–¥–∏–Ω) ------------------
  const [creationDate, setCreationDate] = useState("");

  // ------------------ 4) –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è firstName, lastName —ñ–∑ Firebase ------------------
  useEffect(() => {
    const unsubAuth = onAuthStateChanged(auth, (user) => {
      if (user) {
        // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–∞–Ω—ñ –ª–µ–∂–∞—Ç—å —É "users/{uid}/userData/data"
        const dataDocRef = doc(db, "users", user.uid, "userData", "data");
        const unsubData = onSnapshot(dataDocRef, (docSnap) => {
          if (docSnap.exists()) {
            const data = docSnap.data();
            setFirstName(data.firstName || "");
            setLastName(data.lastName || "");
          }
        });
        // –û–Ω–æ–≤–ª—é—î–º–æ creationDate (—Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑, –∞–±–æ –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó)
        const dateOnly = new Date().toLocaleDateString();
        setCreationDate(dateOnly);

        return () => unsubData();
      } else {
        setFirstName("");
        setLastName("");
      }
    });

    return () => unsubAuth();
  }, []);

  // ------------------ 5) –û–ø–∏—à–µ–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É ------------------
  const availablePdfLangs = [
    { value: "de", shortLabel: "DE", fullLabel: "Deutsch", flag: "üá©üá™" },
    { value: "en", shortLabel: "EN", fullLabel: "English", flag: "üá¨üáß" },
    { value: "uk", shortLabel: "UKR", fullLabel: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", flag: "üá∫üá¶" },
    { value: "ru", shortLabel: "RU", fullLabel: "–†—É—Å—Å–∫–∏–π", flag: "üí©" },
    { value: "fr", shortLabel: "FR", fullLabel: "Fran√ßais", flag: "üá´üá∑" },
    { value: "es", shortLabel: "ES", fullLabel: "Espa√±ol", flag: "üá™üá∏" },
    { value: "ar", shortLabel: "AR", fullLabel: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", flag: "üá∏üá¶" },
    { value: "tr", shortLabel: "TR", fullLabel: "T√ºrk√ße", flag: "üáπüá∑" },
    { value: "pl", shortLabel: "PL", fullLabel: "Polski", flag: "üáµüá±" },
  ];

  // ------------------ 6) –ö–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä—à–æ—ó —Ç–∞–±–ª–∏—Ü—ñ ------------------
  const firstTableColumns = useMemo(() => {
    if (category === "EU") {
      // –ë–µ–∑ apostille
      return [
        { header: "Document", dataKey: "title" },
        { header: "Available", dataKey: "available" },
        { header: "Notarized", dataKey: "notary" },
        { header: "Translation", dataKey: "translation" },
        { header: "Copies", dataKey: "ready_copies" },
        { header: "Sent", dataKey: "sent" },
      ];
    } else {
      // Non-EU
      return [
        { header: "Document", dataKey: "title" },
        { header: "Available", dataKey: "available" },
        { header: "Apostille", dataKey: "apostile" },
        { header: "Notarized", dataKey: "notary" },
        { header: "Translation", dataKey: "translation" },
        { header: "Copies", dataKey: "ready_copies" },
        { header: "Sent", dataKey: "sent" },
      ];
    }
  }, [category]);

  // ------------------ 7) –ö–æ–ª–æ–Ω–∫–∏ –¥—Ä—É–≥–æ—ó —Ç–∞–±–ª–∏—Ü—ñ ------------------
  const secondTableColumns = [
    { header: "Document", dataKey: "title" },
    { header: "Available", dataKey: "available" },
    { header: "Sent", dataKey: "sent" },
  ];

  // ------------------ 8) –ú–∞—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ ------------------
  const mainDocs = useMemo(() => {
    return category === "EU" ? documents.mainEU : documents.mainNonEU;
  }, [category, documents]);

  const optionalIncluded = useMemo(() => {
    return documents.optional.filter(
      (doc) => !checkboxes[String(doc.id)]?.hide
    );
  }, [documents.optional, checkboxes]);

  const firstTableDocs = useMemo(() => {
    return [...mainDocs, ...optionalIncluded];
  }, [mainDocs, optionalIncluded]);

  const secondTableDocs = useMemo(() => {
    return documents.second.filter((doc) => !checkboxes[String(doc.id)]?.hide);
  }, [documents.second, checkboxes]);

  // ------------------ 9) –¢—ñ–ª–∞ —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –ª–æ–∫–∞–ª—å–Ω–æ—ó pdfLanguage ------------------
  const firstTableBody_userLang = useMemo(() => {
    return firstTableDocs
      .map((doc) => makeRowObject(doc, checkboxes, pdfLanguage))
      .filter((row) => row.title.trim() !== "");
  }, [firstTableDocs, checkboxes, pdfLanguage]);

  const secondTableBody_userLang = useMemo(() => {
    return secondTableDocs
      .map((doc) => makeRowObject(doc, checkboxes, pdfLanguage))
      .filter((row) => row.title.trim() !== "");
  }, [secondTableDocs, checkboxes, pdfLanguage]);

  // ------------------ 10) –¢—ñ–ª–∞ —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –Ω—ñ–º–µ—Ü—å–∫–æ—ó ------------------
  const firstTableBody_german = useMemo(() => {
    return firstTableDocs
      .map((doc) => makeRowObject(doc, checkboxes, "de"))
      .filter((row) => row.title.trim() !== "");
  }, [firstTableDocs, checkboxes]);

  const secondTableBody_german = useMemo(() => {
    return secondTableDocs
      .map((doc) => makeRowObject(doc, checkboxes, "de"))
      .filter((row) => row.title.trim() !== "");
  }, [secondTableDocs, checkboxes]);

  // ------------------ 11) –§—É–Ω–∫—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—ñ–º‚Äô—è, –ø—Ä—ñ–∑–≤–∏—â–µ, –¥–∞—Ç–∞) ------------------
  function addPageHeader(pdfInstance, fName, lName, dateStr) {
    // –õ—ñ–≤–∏–π –≤–µ—Ä—Ö–Ω—ñ–π –∫—É—Ç
    pdfInstance.setFontSize(12);
    pdfInstance.text(`${fName} ${lName}`, 40, 30);

    // –ü—Ä–∞–≤–∏–π –≤–µ—Ä—Ö–Ω—ñ–π –∫—É—Ç: –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ - ~100
    const pageWidth = pdfInstance.internal.pageSize.getWidth();
    pdfInstance.text(dateStr, pageWidth - 100, 30);
  }

  // ------------------ 12) –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF ------------------
  const handleGeneratePDF = () => {
    const doc = new jsPDF("l", "pt", "a4");

    // –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: –ª–æ–∫–∞–ª—å–Ω–∞ –º–æ–≤–∞
    addPageHeader(doc, firstName, lastName, creationDate);
    doc.autoTable({
      columns: firstTableColumns,
      body: firstTableBody_userLang,
      startY: 50,
      margin: { left: 40, right: 40 },
      theme: "grid",
      styles: { fontSize: 10, cellPadding: 3, lineWidth: 0.5 },
      headStyles: { fillColor: [220, 220, 220] },
    });
    doc.autoTable({
      columns: secondTableColumns,
      body: secondTableBody_userLang,
      startY: doc.lastAutoTable.finalY + 20,
      margin: { left: 40, right: 40 },
      theme: "grid",
      styles: { fontSize: 10, cellPadding: 3, lineWidth: 0.5 },
      headStyles: { fillColor: [220, 220, 220] },
    });

    // –î—Ä—É–≥–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: –Ω—ñ–º–µ—Ü—å–∫–∞
    doc.addPage("l");
    addPageHeader(doc, firstName, lastName, creationDate);
    doc.autoTable({
      columns: firstTableColumns,
      body: firstTableBody_german,
      startY: 50,
      margin: { left: 40, right: 40 },
      theme: "grid",
      styles: { fontSize: 10, cellPadding: 3, lineWidth: 0.5 },
      headStyles: { fillColor: [220, 220, 220] },
    });
    doc.autoTable({
      columns: secondTableColumns,
      body: secondTableBody_german,
      startY: doc.lastAutoTable.finalY + 20,
      margin: { left: 40, right: 40 },
      theme: "grid",
      styles: { fontSize: 10, cellPadding: 3, lineWidth: 0.5 },
      headStyles: { fillColor: [220, 220, 220] },
    });

    doc.save(`documents_${pdfLanguage}_and_de.pdf`);
    onClose();
  };

  // ------------------ 13) –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ PDF ------------------
  const handleViewPDF = () => {
    const doc = new jsPDF("l", "pt", "a4");

    addPageHeader(doc, firstName, lastName, creationDate);
    doc.autoTable({
      columns: firstTableColumns,
      body: firstTableBody_userLang,
      startY: 50,
      theme: "grid",
      margin: { left: 40, right: 40 },
      styles: { fontSize: 10, cellPadding: 3, lineWidth: 0.5 },
      headStyles: { fillColor: [220, 220, 220] },
    });
    doc.autoTable({
      columns: secondTableColumns,
      body: secondTableBody_userLang,
      startY: doc.lastAutoTable.finalY + 20,
      theme: "grid",
      margin: { left: 40, right: 40 },
      styles: { fontSize: 10, cellPadding: 3, lineWidth: 0.5 },
      headStyles: { fillColor: [220, 220, 220] },
    });

    // –°—Ç–æ—Ä—ñ–Ω–∫–∞ 2: –Ω—ñ–º–µ—Ü—å–∫–∞
    doc.addPage("l");
    addPageHeader(doc, firstName, lastName, creationDate);
    doc.autoTable({
      columns: firstTableColumns,
      body: firstTableBody_german,
      startY: 50,
      theme: "grid",
      margin: { left: 40, right: 40 },
      styles: { fontSize: 10, cellPadding: 3, lineWidth: 0.5 },
      headStyles: { fillColor: [220, 220, 220] },
    });
    doc.autoTable({
      columns: secondTableColumns,
      body: secondTableBody_german,
      startY: doc.lastAutoTable.finalY + 20,
      theme: "grid",
      margin: { left: 40, right: 40 },
      styles: { fontSize: 10, cellPadding: 3, lineWidth: 0.5 },
      headStyles: { fillColor: [220, 220, 220] },
    });

    doc.output("dataurlnewwindow");
    onClose();
  };

  // ------------------ –†–µ–Ω–¥–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ ------------------
  return (
    <div className={styles.pdfModal}>
      <div className={styles.modalContent}>
        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç–∏ */}
        <button className={styles.closeButton} onClick={onClose}>
          <FaTimes />
        </button>

        <div className={styles.modalTitle}>PDF Table</div>
        <div className={styles.buttons}>
    {/* –í–∏–±—ñ—Ä –º–æ–≤–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç—É */}
    <div className={styles.languageSelect}>
  <div className={styles.languageContainer}>
    <span>
      {availablePdfLangs.find(lang => lang.value === pdfLanguage)?.flag}
      {availablePdfLangs.find(lang => lang.value === pdfLanguage)?.shortLabel}
    </span>
    <select
      id="pdfLangSelect"
      value={pdfLanguage}
      onChange={(e) => setPdfLanguage(e.target.value)}
    >
      {availablePdfLangs.map((langOption) => (
        <option key={langOption.value} value={langOption.value}>
          {langOption.flag} {langOption.fullLabel}
        </option>
      ))}
    </select>
  </div>
</div>

    {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É PDF */}
    <div className={styles.buttonContainer}>
    <button className={styles.roundButton} onClick={handleViewPDF}>
        <FaEye className={styles.viewIcon} />
    </button>
</div>

    {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF */}
    <div className={styles.buttonContainer}>
        <button className={styles.roundButton} onClick={handleGeneratePDF}>
            <FaDownload className={styles.pdfIcon} />
        </button>
    </div>
</div>
      </div>
    </div>
  );
};

PDFTable.propTypes = {
  onClose: PropTypes.func.isRequired,
  language: PropTypes.string.isRequired, // –ì–ª–æ–±–∞–ª—å–Ω–∞ –º–æ–≤–∞
  category: PropTypes.string.isRequired, // "EU" –∞–±–æ "Non-EU"
  checkboxes: PropTypes.object.isRequired,
  documents: PropTypes.shape({
    mainEU: PropTypes.array,
    mainNonEU: PropTypes.array,
    second: PropTypes.array,
    optional: PropTypes.array,
  }).isRequired,
};

export default PDFTable;
