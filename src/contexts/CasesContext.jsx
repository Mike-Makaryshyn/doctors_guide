// src/contexts/CasesContext.jsx

import React, { createContext, useState, useEffect, useContext, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "../supabaseClient";
import { useAuth } from "./AuthContext";
import { DataSourceContext } from "./DataSourceContext";
import useGetGlobalInfo from "../hooks/useGetGlobalInfo"; // –Ü–º–ø–æ—Ä—Ç —ñ—Å–Ω—É—é—á–æ–≥–æ —Ö—É–∫—É
import { toast } from "react-toastify"; // –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç toast

const CasesContext = createContext();

export const CasesProvider = ({ children }) => {
  const { dataSources, fetchFirebaseCases } = useContext(DataSourceContext);
  const { currentUser } = useAuth();
  const navigate = useNavigate();

  // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ö—É–∫–∞ useGetGlobalInfo –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  const {
    selectedRegion: globalSelectedRegion,
    handleChangeRegion,
    // —ñ–Ω—à—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
  } = useGetGlobalInfo() || {};

  // –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è —Ä–µ–≥—ñ–æ–Ω—É —Ç–∞ —Ç–∏–ø—É –¥–∂–µ—Ä–µ–ª–∞
  const [localRegion, setLocalRegion] = useState(globalSelectedRegion);
  const [localSourceType, setLocalSourceType] = useState("local"); // –∞–±–æ —ñ–Ω—à–µ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è

  // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–≥—ñ–æ–Ω –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É
  useEffect(() => {
    setLocalRegion(globalSelectedRegion);
  }, [globalSelectedRegion]);

  const [userCases, setUserCases] = useState([]);
  const [regionalCases, setRegionalCases] = useState([]);
  const [deferredCases, setDeferredCases] = useState([]);
  const [completedCases, setCompletedCases] = useState([]);
  const [loading, setLoading] = useState(false);
  const [navigating, setNavigating] = useState(false);
  const [error, setError] = useState(null);

  const [userData, setUserData] = useState(null); // –î–æ–¥–∞—î–º–æ userData

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–∏ —Ä–µ–≥—ñ–æ–Ω—É
  const handleLocalRegionChange = (region) => {
    setLocalRegion(region);
    // –ù–µ –≤–∏–∫–ª–∏–∫–∞–π—Ç–µ handleChangeRegion, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–∏ —Ç–∏–ø—É –¥–∂–µ—Ä–µ–ª–∞
  const handleLocalSourceTypeChange = (type) => {
    setLocalSourceType(type);
    // –î–æ–¥–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  };

  // –§–µ—Ç—á–∏–Ω–≥ "–ú–æ—ó—Ö –≤–∏–ø–∞–¥–∫—ñ–≤"
  useEffect(() => {
    const fetchMyCases = async () => {
      if (!currentUser) {
        setUserCases([]);
        return;
      }
      setLoading(true);
      try {
        const { data: cases, error } = await supabase
          .from('cases')
          .select('*')
          .eq('authorid', currentUser.id);
        if (error) throw error;
        // Assuming each record has a 'region' field
        setUserCases(cases);
      } catch (err) {
        console.error("Fehler beim Laden Ihrer F√§lle:", err);
        setError("Fehler beim Laden Ihrer F√§lle.");
      } finally {
        setLoading(false);
      }
    };

    fetchMyCases();
  }, [currentUser]);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–µ—Ç—á–∏–Ω–≥—É —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
const fetchRegionalCases = useCallback(async () => {
  if (!localRegion) {
    setRegionalCases([]);
    return;
  }

  setLoading(true);
  try {
    if (localSourceType === "local") {
      const localCases = dataSources[localRegion]?.sources?.local.map(c => ({
        ...c,
        source: "local",
        region: localRegion
      })) || [];
      setRegionalCases(localCases);
      console.log("üíæ localCases for", localRegion, "=", localCases);
    } else {
      // Fetch the full record and extract its JSONB field
      const { data: record, error } = await supabase
        .from('cases')
        .select('*')
        .eq('id', localRegion)
        .single();
      if (error && error.code !== 'PGRST116') throw error;
      const supCases = record?.cases || [];
      const annotated = supCases.map(c => ({
        ...c,
        source: "supabase",
        region: localRegion
      }));
      setRegionalCases(annotated);
      console.log("üíæ regionalCases for", localRegion, "=", annotated);
    }
  } catch (error) {
    console.error("Error fetching regional cases:", error);
    setError("Fehler beim Laden der regionalen F√§lle.");
    setRegionalCases([]);
  } finally {
    setLoading(false);
  }
}, [localRegion, localSourceType, dataSources]);

  useEffect(() => {
    fetchRegionalCases();
  }, [fetchRegionalCases]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
  const updateLocalRegionalCases = (updatedCases) => {
    setRegionalCases(updatedCases);
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ (deferred/completed)
  const reloadStatuses = useCallback(async () => {
    if (!currentUser || !localRegion) return;

    try {
      const {
        data: { user },
        error: userError
      } = await supabase.auth.getUser();
      if (userError) throw userError;
      const userDataFetched = user.user_metadata || {};
      setUserData(userDataFetched); // –û–Ω–æ–≤–ª—é—î–º–æ userData

      const allDeferred = [];
      const allCompleted = [];

      Object.keys(dataSources)
        .filter((r) => dataSources[r]?.type === "dynamic")
        .forEach((region) => {
          const defArr = userDataFetched[`deferredCases_${region}`] || [];
          const compArr = userDataFetched[`completedCases_${region}`] || [];
          defArr.forEach((cid) => allDeferred.push({ caseId: String(cid), region }));
          compArr.forEach((cid) => allCompleted.push({ caseId: String(cid), region }));
        });

      setDeferredCases(allDeferred);
      setCompletedCases(allCompleted);
    } catch (err) {
      console.error("Error reloading deferred/completed statuses:", err);
      setError("Error reloading statuses.");
    }
  }, [currentUser, dataSources, localRegion]);

  useEffect(() => {
    reloadStatuses();
  }, [reloadStatuses]);

  // (Realtime Firestore listener removed)

  // **–§—É–Ω–∫—Ü—ñ—ó: handleMarkAsCompleted —Ç–∞ handleDeferCase**
  const handleMarkAsCompleted = useCallback(
    async (caseId, region) => {
      if (!currentUser) {
        toast.error("User is not authenticated.");
        return;
      }
      if (!region || !caseId) {
        toast.error("Please select a case and a region.");
        return;
      }
      try {
        const completedKey = `completedCases_${region}`;
        const deferredKey = `deferredCases_${region}`;
        const isCompleted = userData?.[completedKey]?.includes(String(caseId));
        const { error } = await supabase.auth.updateUser({
          data: {
            [completedKey]: isCompleted
              ? (userData[completedKey] || []).filter(id => id !== String(caseId))
              : [...(userData[completedKey] || []), String(caseId)],
            [deferredKey]: isCompleted
              ? userData[deferredKey]
              : (userData[deferredKey] || []).filter(id => id !== String(caseId))
          }
        });
        if (error) throw error;
        setUserData((prev) => ({
          ...prev,
          [completedKey]: isCompleted
            ? (prev[completedKey] || []).filter(id => id !== String(caseId))
            : [...(prev[completedKey] || []), String(caseId)],
          [deferredKey]: isCompleted
            ? prev[deferredKey]
            : (prev[deferredKey] || []).filter(id => id !== String(caseId))
        }));
        toast.success(isCompleted ? "–°—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ." : "–°—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–æ –¥–æ–¥–∞–Ω–æ.");
      } catch (error) {
        console.error("Error marking case as completed:", error);
        toast.error("Failed to mark case as completed.");
      }
    },
    [currentUser, userData]
  );

  const handleDeferCase = useCallback(
    async (caseId, region) => {
      if (!currentUser) {
        toast.error("User is not authenticated.");
        return;
      }
      if (!region || !caseId) {
        toast.error("Please select a case and a region.");
        return;
      }
      try {
        const deferredKey = `deferredCases_${region}`;
        const completedKey = `completedCases_${region}`;
        const isDeferred = userData?.[deferredKey]?.includes(String(caseId));
        const { error } = await supabase.auth.updateUser({
          data: {
            [deferredKey]: isDeferred
              ? (userData[deferredKey] || []).filter(id => id !== String(caseId))
              : [...(userData[deferredKey] || []), String(caseId)],
            [completedKey]: isDeferred
              ? userData[completedKey]
              : (userData[completedKey] || []).filter(id => id !== String(caseId))
          }
        });
        if (error) throw error;
        setUserData((prev) => ({
          ...prev,
          [deferredKey]: isDeferred
            ? (prev[deferredKey] || []).filter(id => id !== String(caseId))
            : [...(prev[deferredKey] || []), String(caseId)],
          [completedKey]: isDeferred
            ? prev[completedKey]
            : (prev[completedKey] || []).filter(id => id !== String(caseId))
        }));
        toast.success(isDeferred ? "–°—Ç–∞—Ç—É—Å –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ." : "–°—Ç–∞—Ç—É—Å –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ –¥–æ–¥–∞–Ω–æ.");
      } catch (error) {
        console.error("Error deferring case:", error);
        toast.error("Failed to defer case.");
      }
    },
    [currentUser, userData]
  );

  // Handler –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–µ–π—Å—É
  const handleEdit = useCallback(
    (myCase) => {
      navigate("/edit-case", { state: { myCase } });
    },
    [navigate]
  );

  // Handler –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–µ–π—Å—É
  const handleDelete = useCallback(
    async (caseItem) => {
      if (!currentUser) return;

      const confirmDel = window.confirm(`–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–ø–∞–¥–æ–∫ "${caseItem.fullName}"?`);
      if (!confirmDel) return;

      try {
        if (localSourceType === "local") {
          const updatedLocalCases =
            dataSources[localRegion]?.sources.local?.filter((c) => String(c.id) !== String(caseItem.id)) || [];
          setRegionalCases(updatedLocalCases);
        } else {
          // Delete case from Supabase
          const { error } = await supabase
            .from('cases')
            .delete()
            .eq('id', caseItem.id);
          if (error) throw error;
          setUserCases(prev => prev.filter(c => String(c.id) !== String(caseItem.id)));
          setRegionalCases(prev => prev.filter(c => String(c.id) !== String(caseItem.id)));
        }
      } catch (err) {
        console.error("Error deleting case:", err);
        setError("Error deleting case.");
      }
    },
    [currentUser, dataSources, localRegion, localSourceType]
  );

  // Handler –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–æ –¥–µ—Ç–∞–ª–µ–π –∫–µ–π—Å—É
  const handleCaseClick = useCallback(
    async (caseId, source, region) => {
      try {
        setNavigating(true);
        if (source !== "local") {
          // load from Supabase if needed
        }
        navigate(`/information-sources/${source}/${caseId}`);
      } catch (err) {
        console.error("Error navigating to case details:", err);
        setError("Error navigating to case details.");
      } finally {
        setNavigating(false);
      }
    },
    [fetchFirebaseCases, navigate]
  );

  // Handler –¥–ª—è –ø–æ–¥—ñ–ª—É –∫–æ–ª–µ–∫—Ü—ñ—î—é (–º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏)
  const handleShareCollection = useCallback(() => {
    // –í–∞—à–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –ø–æ–¥—ñ–ª—É –∫–æ–ª–µ–∫—Ü—ñ—î—é
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–µ–π—Å—ñ–≤
  const statusOrder = (st) => {
    if (st === "deferred") return 1;
    if (st === "completed") return 3;
    return 2;
  };

  const getCaseStatus = (caseId, region) => {
    const isDef = deferredCases.some(
      (x) => x.caseId === String(caseId) && x.region === region
    );
    if (isDef) return "deferred";

    const isComp = completedCases.some(
      (x) => x.caseId === String(caseId) && x.region === region
    );
    if (isComp) return "completed";

    return null;
  };

  // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–µ–π—Å—ñ–≤ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
  const sortedCases = (list, region) => {
    return [...list].sort((a, b) => {
      const stA = getCaseStatus(a.id, region);
      const stB = getCaseStatus(b.id, region);
      return statusOrder(stA) - statusOrder(stB);
    });
  };

  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–µ–π—Å—É
  const handleEditCase = (e, mc) => {
    e.stopPropagation();
    navigate("/edit-case", { state: { myCase: mc } });
  };

  return (
    <CasesContext.Provider
      value={{
        userCases,
        regionalCases,
        selectedRegion: localRegion, // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É
        sourceType: localSourceType, // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É –¥–∂–µ—Ä–µ–ª–∞
        handleEdit,
        handleDelete,
        handleMarkAsCompleted, // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        handleDeferCase, // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        handleCaseClick,
        setSourceType: handleLocalSourceTypeChange, // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑–º—ñ–Ω–∏ —Ç–∏–ø—É –¥–∂–µ—Ä–µ–ª–∞
        setSelectedRegion: handleLocalRegionChange, // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑–º—ñ–Ω–∏ —Ä–µ–≥—ñ–æ–Ω—É
        loading,
        error,
        handleShareCollection,
        deferredCases,
        completedCases,
        userData, // –î–æ–¥–∞—î–º–æ userData –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        sortedCases, // –î–æ–¥–∞—î–º–æ sortedCases –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        getCaseStatus, // –î–æ–¥–∞—î–º–æ getCaseStatus –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        handleEditCase, // –î–æ–¥–∞—î–º–æ handleEditCase –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
      }}
    >
      {children}
    </CasesContext.Provider>
  );
};

export const useCases = () => {
  return useContext(CasesContext);
};